// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id                String      @id @default(uuid())
  email             String      @unique
  name              String?
  password          String
  role              String      @default("user")
  firstName         String?
  lastName          String?
  address           Json?
  phone             String?
  resetPasswordToken String?
  resetPasswordExpire DateTime?
  totpSecret        String?     @unique
  tempTotpSecret    String?
  totpEnabled       Boolean     @default(false)
  totpExpiresAt     DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  orders            Order[]
  codOrders         CodOrder[]
  reviews           Review[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    String
  images      String[]
  stock       Int
  sizes       String[]
  colors      String[]
  gender      String
  rating      Float       @default(0)
  numReviews  Int         @default(0)
  featured    Boolean     @default(false)
  discount    Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  reviews     Review[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String
  slug        String    @unique
  image       String?
  parentId    Int?
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  children    Category[] @relation("CategoryToCategory")
  isActive    Boolean   @default(true)
  featured    Boolean   @default(false)
  gender      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]
  totalAmount   Float
  status        String      @default("pending")
  paymentMethod String
  isPaid        Boolean     @default(false)
  paidAt        DateTime?
  isDelivered   Boolean     @default(false)
  deliveredAt   DateTime?
  shippingAddress Json
  itemsPrice    Float
  taxPrice      Float
  shippingPrice Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  size      String?
  color     String?
  name      String
  image     String?
}

model CodOrder {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  status      String   @default("pending")
  totalAmount Float
  address     String
  phone       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 